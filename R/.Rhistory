ggplot( data=year_vol
,aes( x=year
,y=freq))+
geom_bar(stat="identity")
}
qa_year_mon<-multi_year%>%
group_by(year_mon)%>%
summarize(Row_Count=n())%>%
filter()
qa_year_mon$year_mon<-as.Date(qa_year_mon$year_mon)
str(qa_year_mon)
ggplot( data=qa_year_mon
,aes( x=year_mon
,y=Row_Count))+
geom_bar(stat="identity")+
scale_x_date(date_breaks='1 Month')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
#  Labelling as desired
labs(
title = "Row-Counts By Year-Month"
#,subtitle = "SUB"
#,caption = "Caption"
)
ggplot( data=qa_year_mon
,aes( x=year_mon
,y=Row_Count))+
geom_bar(stat="identity")
ggplot( data=qa_year_mon
,aes( x=year_mon
,y=Row_Count))+
geom_bar(stat="identity")+
scale_x_date(date_breaks='1 Month')
ggplot( data=qa_year_mon
,aes( x=year_mon
,y=Row_Count))+
geom_bar(stat="identity")+
scale_x_date(breaks = date_breaks("months"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
#  Labelling as desired
labs(
title = "Row-Counts By Year-Month"
#,subtitle = "SUB"
#,caption = "Caption"
)
ggplot( data=qa_year_mon
,aes( x=year_mon
,y=Row_Count))+
geom_bar(stat="identity")+
scale_x_date(breaks = date_breaks("months"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
#  Labelling as desired
labs(
title = "Row-Counts By Year-Month"
#,subtitle = "SUB"
#,caption = "Caption"
)
qa_year_mon<-multi_year%>%
group_by(year_mon)%>%
summarize(Row_Count=n())%>%
filter()
qa_year_mon$year_mon<-as.Date(qa_year_mon$year_mon)
str(qa_year_mon)
ggplot( data=qa_year_mon
,aes( x=year_mon
,y=Row_Count))+
geom_bar(stat="identity")+
scale_x_date( breaks = date_breaks("months")
,labels = date_format("%m-%ccyy")  )+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
#  Labelling as desired
labs(
title = "Row-Counts By Year-Month"
#,subtitle = "SUB"
#,caption = "Caption"
)
qa_year_mon<-multi_year%>%
group_by(year_mon)%>%
summarize(Row_Count=n())%>%
filter()
qa_year_mon$year_mon<-as.Date(qa_year_mon$year_mon)
str(qa_year_mon)
ggplot( data=qa_year_mon
,aes( x=year_mon
,y=Row_Count))+
geom_bar(stat="identity")+
scale_x_date( breaks = date_breaks("months")
,labels = date_format("%b-%Y")  )+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
#  Labelling as desired
labs(
title = "Row-Counts By Year-Month"
#,subtitle = "SUB"
#,caption = "Caption"
)
ggplot( data=qa_year_mon
,aes( x=year_mon
,y=Row_Count))+
geom_bar(stat="identity")+
scale_x_date( breaks = date_breaks("months")
,labels = date_format("%b-%Y"),expand = c(.01, .01))+
theme(axis.text.x = element_text( angle = 90
,vjust = 0.5
,hjust=1))+
#  Labelling as desired
labs(
title = "Row-Counts By Year-Month"
#,subtitle = "SUB"
#,caption = "Caption"
)
ggplot( data=qa_year_mon
,aes( x=year_mon
,y=Row_Count))+
geom_bar(stat="identity")+
scale_x_date( breaks = date_breaks("months")
,labels = date_format("%b-%Y")
,expand = c(.01, .01))+
theme(axis.text.x = element_text( angle = 90
,vjust = 0.5
,hjust=1))+
#  Labelling as desired
labs(
title = "Row-Counts By Year-Month"
#,subtitle = "SUB"
#,caption = "Caption"
)
auto_crimes<-c( 'Motor vehicle theft'
,'Theft from motor vehicle'
,'Theft of motor vehicle parts or accessory'
)
## Individual Crimes
for (icrime in auto_crimes) {
print(icrime)
crimes_filtered<-multi_year[NIBRSDescription==icrime]
print(nrow(crimes_filtered) )
print(NIBRS_Trend(indata=crimes_filtered,icrime))
print(NIBRS_YTD(indata=crimes_filtered,icrime))
}
NIBRS_Trend<- function( indata
,title1='title1') {
data<-indata[,.(OffenseCount=sum(OffenseCount)),by=(year_mon)]%>%
.[,Rolling_12_Month:=frollapply(OffenseCount,12,mean),]%>%
.[order(year_mon)]%>%
.[year_mon>'2019-12-01']
start_val<-data[year_mon==min(year_mon)][[1,3]]
max_value<-data[Rolling_12_Month==max(Rolling_12_Month)][[1,3]]
min_value<-data[Rolling_12_Month==min(Rolling_12_Month)][[1,3]]
end_value<-data[year_mon==max(year_mon)][[1,3]]
return(ggplot(data=data, aes(x=year_mon, y=Rolling_12_Month, group=1))+
ggtitle(glue('{title1}\n\rOverall'))+
geom_line(color="darkblue", linewidth=1, alpha=0.9, linetype=1)+
geom_hline(yintercept=start_val, linetype="dashed", color = "darkgreen")+
geom_hline(yintercept=end_value, linetype="dashed", color = "red")+
geom_hline(yintercept=max_value, linetype="dashed", color = "blue")+
theme_economist()+
theme(legend.key = element_rect(fill = "grey", colour = "black"))+
theme(plot.title = element_text(hjust = 0.5))+
ylab("Rolling 12 Month Average"))
}
#NIBRS_Trend(crimes_filtered,'Violent')
eom<-function( month
,year
,base_day='28'){
return(round_date(as.Date(ISOdate( year=year
,month=month
,day=base_day)),'month')-days(1))
}
m='06'
y='2019'
t<-eom(m,y)
eom(m,y)
eom('06','2019')
NIBRS_YTD<- function( indata
,title1='title1'
,bas_yr='2019'
,pri_yr='2022'
,cur_yr='2023'
,latest_mon='06') {
#2019
base_end_dt<-eom(latest_mon,bas_yr)
bas_agg<-indata[ (RMSOccurrenceDate>=glue('{bas_yr}-01-01')
&RMSOccurrenceDate<=as.Date(base_end_dt))
,.(OffenseCount=sum(OffenseCount))
,by=group_dims]
#2022
pri_end_dt<-eom(latest_mon,pri_yr)
pri_agg<-indata[ (RMSOccurrenceDate>=glue('{pri_yr}-01-01')
&RMSOccurrenceDate<=as.Date(pri_end_dt))
,.(OffenseCount=sum(OffenseCount))
,by=group_dims]
#2023
cur_end_dt<-eom(latest_mon,cur_yr)
cur_agg<-indata[ (RMSOccurrenceDate>=glue('{cur_yr}-01-01')
&RMSOccurrenceDate<=as.Date(cur_end_dt))
,.(OffenseCount=sum(OffenseCount))
,by=group_dims]
#Prep for Plotting
bas_agg[,'Year':=bas_yr]
pri_agg[,'Year':=pri_yr]
cur_agg[,'Year':=cur_yr]
plot_prep<- rbindlist(list(bas_agg,pri_agg,cur_agg))
return(ggplot( data=plot_prep
,aes( y=OffenseCount
,x=Year
,fill=Year))+
geom_bar( position="dodge"
,stat="identity")+
ggtitle(glue("Year-To-Date - {title1}"))+
theme_economist()+
scale_fill_manual(values=c('darkblue', 'darkgreen', 'darkred')))
}
#NIBRS_YTD(crimes_filtered)
#Prepare for comparison
#setnames(bas_agg, "OffenseCount", glue("OffenseCount_bas"))
#setnames(pri_agg, "OffenseCount", glue("OffenseCount_pri"))
#setnames(cur_agg, "OffenseCount", glue("OffenseCount_cur"))
#comp_ytds<-bas_agg[pri_agg,on=group_dims]%>%
#  .[cur_agg,on=group_dims]
#comp_ytds[,'diff_pri':=OffenseCount_cur-OffenseCount_pri]
#comp_ytds[,'diff_bas':=OffenseCount_cur-OffenseCount_bas]
#comp_ytds[,'perc_pri':=diff_pri/OffenseCount_cur]
#comp_ytds[,'perc_bas':=diff_bas/OffenseCount_pri]
#setnames( comp_ytds
#          ,c("OffenseCount_bas","OffenseCount_pri","OffenseCount_cur")
#          ,c( glue("OffenseCount_{bas_yr}")#
#              ,glue("OffenseCount_{pri_yr}")
#              ,glue("OffenseCount_{cur_yr}")))
auto_crimes<-c( 'Motor vehicle theft'
,'Theft from motor vehicle'
,'Theft of motor vehicle parts or accessory'
)
## Individual Crimes
for (icrime in auto_crimes) {
print(icrime)
crimes_filtered<-multi_year[NIBRSDescription==icrime]
print(nrow(crimes_filtered) )
print(NIBRS_Trend(indata=crimes_filtered,icrime))
print(NIBRS_YTD(indata=crimes_filtered,icrime))
}
library(leaflet.extras)
data_pre<-multi_year[  (NIBRSDescription %chin% violent_crimes)
&(RMSOccurrenceDate>='2023-06-01')
,]%>%
.[ (!is.na(MapLongitude))
|(!is.na(MapLatitude))]%>%
st_as_sf( coords=c("MapLongitude","MapLatitude")
,crs=4326
,remove=FALSE)
library("readxl")
library("glue")
library("tidyverse")
library("data.table")
library("zoo")
library("ggplot2")
library("ggthemes")
library("leaflet")
library('sf')
library('dplyr')
sf_use_s2(FALSE)
eom<-function( month
,year
,base_day='28'){
return(round_date(as.Date(ISOdate( year=year
,month=month
,day=base_day)),'month')-days(1))
}
#m='06'
#y='2019'
#t<-eom(m,y)
#eom(m,y)
#eom('06','2019')
#theme_update(plot.title = element_text(hjust = 0.5))
where_the_data_is<-'C:/Users/chris/Documents/Random_Nextdoor/My_Crime_Analysis - 05.04.23/Group/Data/HPD_NIBRS/'
support_dir<-'C:/Users/chris/Documents/GitHub/HoustonCrimeDataAnalysis/DATA/Support/'
districts<-st_read(glue("{support_dir}COH_ADMINISTRATIVE_BOUNDARY_-_MIL.geojson"))%>%
filter(!is.na(DISTRICT) )
beats<-st_read(glue("{support_dir}COH_POLICE_BEATS.geojson"))
bydim<-'Overall'
group_dims<-c('NIBRSDescription',bydim)
violent_crimes<-c('Aggravated Assault'
,'Forcible rape'
,'Robbery'
,'Murder, non-negligent')
baseline<-read_excel(glue('{where_the_data_is}2019_NIBRSPublicView.Jan1-Dec31.xlsx'))%>%
rename( OffenseCount=`Offense\r\nCount`
,RMSOccurrenceDate=`Occurrence\r\nDate`
,ZIPCode=`ZIP Code`
,StreetType=`Street\r\nType`
,RMSOccurrenceHour=`Occurrence\r\nHour`
,NIBRSClass=`NIBRS\r\nClass`
,StreetNo=`Block Range`)
baseline$MapLongitude<-NA
baseline$MapLatitude<-NA
min(baseline$RMSOccurrenceDate)
max(baseline$RMSOccurrenceDate)
year1<-read_excel(glue('{where_the_data_is}NIBRSPublicView.Jan1-Dec31-2020.xlsx'))%>%
rename( OffenseCount=`Offense\r\nCount`
,RMSOccurrenceDate=`Occurrence\r\nDate`
,ZIPCode=`ZIP Code`
,StreetType=`Street\r\nType`
,RMSOccurrenceHour=`Occurrence\r\nHour`
,NIBRSClass=`NIBRS\r\nClass`
,StreetNo=`Block Range`)
year1$MapLongitude<-NA
year1$MapLatitude<-NA
min(year1$RMSOccurrenceDate)
max(year1$RMSOccurrenceDate)
year2<-read_excel(glue('{where_the_data_is}NIBRSPublicViewDec21.xlsx'))
year2$MapLongitude<-NA
year2$MapLatitude<-NA
min(year2$RMSOccurrenceDate)
max(year2$RMSOccurrenceDate)
year3<-read_excel(glue('{where_the_data_is}NIBRSPublicViewDec22.xlsx'))
min(year3$RMSOccurrenceDate)
max(year3$RMSOccurrenceDate)
year4<-read_excel(glue('{where_the_data_is}NIBRSPublicViewJun23.xlsx'))
min(year4$RMSOccurrenceDate)
max(year4$RMSOccurrenceDate)
multi_year<-rbind(baseline,year1,year2,year3,year4)%>%
mutate(year_mon=floor_date(RMSOccurrenceDate,'month'))
multi_year$year<-year(multi_year$RMSOccurrenceDate)
multi_year$Overall<-'OverAll'
setDT(multi_year)
to_dt_month<-'06'
YTD_VOLUMES<-multi_year[ (NIBRSDescription %chin% violent_crimes),]%>%
.[ ( RMSOccurrenceDate>=glue('2019-01-01')
&RMSOccurrenceDate<=eom(to_dt_month,2019))
|( RMSOccurrenceDate>=glue('2020-01-01')
&RMSOccurrenceDate<=eom(to_dt_month,2020))
|( RMSOccurrenceDate>=glue('2021-01-01')
&RMSOccurrenceDate<=eom(to_dt_month,2021))
|( RMSOccurrenceDate>=glue('2022-01-01')
&RMSOccurrenceDate<=eom(to_dt_month,2022))
|( RMSOccurrenceDate>=glue('2023-01-01')
&RMSOccurrenceDate<=eom(to_dt_month,2023)),]
ETL_VALIDATE<-function(){
qa_year_mon<-multi_year%>%
group_by(year_mon)%>%
summarize(Row_Count=n())%>%
filter()
qa_year_mon$year_mon<-as.Date(qa_year_mon$year_mon)
str(qa_year_mon)
ggplot( data=qa_year_mon
,aes( x=year_mon
,y=Row_Count))+
geom_bar(stat="identity")+
scale_x_date( breaks = date_breaks("months")
,labels = date_format("%b-%Y")
,expand = c(.01, .01))+
theme(axis.text.x = element_text( angle = 90
,vjust = 0.5
,hjust=1))+
#  Labelling as desired
labs(
title = "Row-Counts By Year-Month"
#,subtitle = "SUB"
#,caption = "Caption"
)
qa_year<-multi_year%>%
group_by(year)%>%
summarize(Row_Count=n())
ggplot( data=qa_year
,aes( x=year
,y=Row_Count))+
geom_bar(stat="identity")
qa_year_by_year_mon<-multi_year%>%group_by(year_mon,year)%>%summarize(freq=n())
to_dt_month<-'06'
YTD_VOLUMES<-multi_year[ (NIBRSDescription %chin% violent_crimes),]%>%
.[ ( RMSOccurrenceDate>=glue('2019-01-01')
&RMSOccurrenceDate<=eom(to_dt_month,2019))
|( RMSOccurrenceDate>=glue('2020-01-01')
&RMSOccurrenceDate<=eom(to_dt_month,2020))
|( RMSOccurrenceDate>=glue('2021-01-01')
&RMSOccurrenceDate<=eom(to_dt_month,2021))
|( RMSOccurrenceDate>=glue('2022-01-01')
&RMSOccurrenceDate<=eom(to_dt_month,2022))
|( RMSOccurrenceDate>=glue('2023-01-01')
&RMSOccurrenceDate<=eom(to_dt_month,2023)),]
year_vol<-YTD_VOLUMES%>%group_by(year)%>%summarize(freq=n())
ggplot( data=year_vol
,aes( x=year
,y=freq))+
geom_bar(stat="identity")
}
library(leaflet.extras)
data_pre<-multi_year[  (NIBRSDescription %chin% violent_crimes)
&(RMSOccurrenceDate>='2023-06-01')
,]%>%
.[ (!is.na(MapLongitude))
|(!is.na(MapLatitude))]%>%
st_as_sf( coords=c("MapLongitude","MapLatitude")
,crs=4326
,remove=FALSE)
datax<-st_join( data_pre
,districts
,join = st_within)
library(leaflet)
library(rlang)
addHeatMap <- function(data, lon, lat, intensity, show.legend, ...) {
df <- data.table::as.data.table(data)
df_expanded <- dplyr::slice(df, rep(1:dplyr::n(), times = !! enquo(intensity)))
lon_var <- dplyr::pull(df_expanded, !! enquo(lon))
lat_var <- dplyr::pull(df_expanded, !! enquo(lat))
lon_bw <- MASS::bandwidth.nrd(lon_var)
lat_bw <- MASS::bandwidth.nrd(lat_var)
lon_lat_df <- dplyr::select(df_expanded, !! enquo(lon), !! enquo(lat))
kde <- KernSmooth::bkde2D(lon_lat_df, bandwidth = c(lon_bw, lat_bw))
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat)
LEVS <- as.factor(sapply(CL, `[[`, "level"))
NLEV <- nlevels(LEVS)
pgons <- lapply(1:length(CL), function(i)
sp::Polygons(list(sp::Polygon(cbind(CL[[i]]$x, CL[[i]]$y))), ID = i))
spgons <- sp::SpatialPolygons(pgons)
if (show.legend) {
leaflet::addPolygons(data = spgons, color = heat.colors(NLEV, NULL)[LEVS], stroke = FALSE, ...) %>%
leaflet::addLegend(colors = heat.colors(NLEV, NULL)[LEVS], labels = LEVS)
} else {
leaflet::addPolygons(data = spgons, color = heat.colors(NLEV, NULL)[LEVS], stroke = FALSE, ...)
}
}
leaflet() %>%
addTiles(group="OSM") %>%
addHeatMap( data=datax
,lon=MapLongitude
,lat=MapLatitude
,intensity=OffenseCount
,show.legend = TRUE)
library(leaflet.extras)
data_pre<-multi_year[  (NIBRSDescription %chin% violent_crimes)
&(RMSOccurrenceDate>='2023-06-01')
,]%>%
.[ (!is.na(MapLongitude))
|(!is.na(MapLatitude))]%>%
st_as_sf( coords=c("MapLongitude","MapLatitude")
,crs=4326
,remove=FALSE)
datax<-st_join( data_pre
,districts
,join = st_within)
nibrs_heat<-function(data=data,rad=15){
pal <- colorFactor(
palette = c('orange', 'blue', 'green', 'purple'),
domain = data$NIBRSDescription
)
data$Address<-paste( data$StreetNo
,' '
,data$StreetName
,' '
,data$StreetType
,' '
,data$Suffix)
data$popup<-paste("<b>Incident #: </b>", data$Incident, "<br>",
"<br>", "<b>Description: </b>", data$NIBRSDescription,
"<br>", "<b>Date: </b>", data$RMSOccurrenceDate,
"<br>", "<b>Time: </b>", data$RMSOccurrenceHour,
"<br>", "<b>Council District: </b>",data$DISTRICT,
"<br>", "<b>HPD Beat: </b>", data$Beat,
"<br>", "<b>Address: </b>", data$Address,
"<br>", "<b>Longitude: </b>", data$MapLongitude,
"<br>", "<b>Latitude: </b>", data$MapLatitude)
data%>%leaflet()%>%
addTiles()%>%
addTiles(group = "OSM (default)") %>%
addHeatmap( lng=~MapLongitude
,lat=~MapLatitude
#,intensity=~OffenseCount
,blur=10
,minOpacity=0.05
,max=0.9
,radius=rad
,cellSize=5
)
}
nibrs_heat(datax,rad=7)
nibrs_heat<-function(data=data,rad=15){
pal <- colorFactor(
palette = c('orange', 'blue', 'green', 'purple'),
domain = data$NIBRSDescription
)
data$Address<-paste( data$StreetNo
,' '
,data$StreetName
,' '
,data$StreetType
,' '
,data$Suffix)
data$popup<-paste("<b>Incident #: </b>", data$Incident, "<br>",
"<br>", "<b>Description: </b>", data$NIBRSDescription,
"<br>", "<b>Date: </b>", data$RMSOccurrenceDate,
"<br>", "<b>Time: </b>", data$RMSOccurrenceHour,
"<br>", "<b>Council District: </b>",data$DISTRICT,
"<br>", "<b>HPD Beat: </b>", data$Beat,
"<br>", "<b>Address: </b>", data$Address,
"<br>", "<b>Longitude: </b>", data$MapLongitude,
"<br>", "<b>Latitude: </b>", data$MapLatitude)
data%>%leaflet()%>%
addTiles()%>%
addTiles(group = "OSM (default)") %>%
addHeatmap( lng=~MapLongitude
,lat=~MapLatitude
#,intensity=~OffenseCount
,blur=10
,minOpacity=0.05
,max=0.9
,radius=rad
,cellSize=5)%>%
addPolygons( data=districts
,fill=T
,color="grey"
,opacity=1
,weight=2)
}
nibrs_heat(datax,rad=7)
